# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//flutter/impeller/tools/metal/metal_library.gni")

template("impeller_shaders") {
  assert(defined(invoker.shaders), "Impeller shaders must be specified.")
  assert(defined(invoker.name), "Name of the shader library must be specified.")

  impellerc_target_name = "impellerc_$target_name"
  compiled_action_foreach(impellerc_target_name) {
    tool = "//flutter/impeller/compiler:impellerc"

    sources = invoker.shaders

    metal_intermediate = "$target_gen_dir/{{source_file_part}}.metal"
    spirv_intermediate = "$target_gen_dir/{{source_file_part}}.spirv"
    reflection_json_intermediate = "$target_gen_dir/{{source_file_part}}.json"
    reflection_header_intermediate = "$target_gen_dir/{{source_file_part}}.h"
    reflection_cc_intermediate = "$target_gen_dir/{{source_file_part}}.cc"

    outputs = [
      metal_intermediate,
      reflection_header_intermediate,
      reflection_cc_intermediate,
    ]

    depfile_path = "$target_gen_dir/{{source_file_part}}.d"
    source_path = "{{source}}"
    metal_intermediate_path = rebase_path(metal_intermediate, root_build_dir)
    spirv_intermediate_path = rebase_path(spirv_intermediate, root_build_dir)
    depfile_intermediate_path = rebase_path(depfile_path, root_build_dir)

    reflection_json_path =
        rebase_path(reflection_json_intermediate, root_build_dir)
    reflection_header_path =
        rebase_path(reflection_header_intermediate, root_build_dir)
    reflection_cc_path = rebase_path(reflection_cc_intermediate, root_build_dir)

    depfile = depfile_path

    args = [
      "--input=$source_path",
      "--metal=$metal_intermediate_path",
      "--spirv=$spirv_intermediate_path",
      "--reflection-json=$reflection_json_path",
      "--reflection-header=$reflection_header_path",
      "--reflection-cc=$reflection_cc_path",
      "--include={{source_dir}}",
      "--depfile=$depfile_intermediate_path",
    ]
  }

  metal_library_target_name = "metal_library_$target_name"
  metal_library(metal_library_target_name) {
    name = invoker.name
    sources = filter_include(get_target_outputs(":$impellerc_target_name"),
                             [ "*.metal" ])
    deps = [ ":$impellerc_target_name" ]
  }

  shader_glue_target_name = "glue_$target_name"
  source_set(shader_glue_target_name) {
    sources = filter_include(get_target_outputs(":$impellerc_target_name"),
                             [
                               "*.h",
                               "*.cc",
                             ])
    deps = [
      ":$impellerc_target_name",
      "//flutter/impeller/impeller:impeller_shader_glue_lib",
    ]
  }

  group(target_name) {
    deps = [
      ":$metal_library_target_name",
      ":$shader_glue_target_name",
    ]
  }
}
